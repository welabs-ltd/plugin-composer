<?php

namespace WeLabs\PluginComposer;

/**
 * Logger class for Plugin Composer
 */
class Logger {
    /**
     * Log levels
     */
    const LEVEL_ERROR = 'error';
    const LEVEL_WARNING = 'warning';
    const LEVEL_INFO = 'info';
    const LEVEL_DEBUG = 'debug';

    /**
     * Log a message
     *
     * @param string $message
     * @param string $level
     * @param array $context
     */
    public static function log( string $message, string $level = self::LEVEL_INFO, array $context = [] ): void {
        if ( ! WP_DEBUG && $level === self::LEVEL_DEBUG ) {
            return;
        }

        $log_entry = [
            'timestamp' => current_time( 'mysql' ),
            'level' => $level,
            'message' => $message,
            'context' => $context,
            'user_id' => get_current_user_id(),
            'ip' => self::get_client_ip(),
        ];

        $formatted_message = sprintf(
            '[Plugin Composer] [%s] %s - %s',
            strtoupper( $level ),
            $log_entry['timestamp'],
            $message
        );

        if ( ! empty( $context ) ) {
            $formatted_message .= ' - Context: ' . wp_json_encode( $context );
        }

        error_log( $formatted_message );

        // Store in database if logging is enabled
        if ( self::is_database_logging_enabled() ) {
            self::store_log_entry( $log_entry );
        }
    }

    /**
     * Log an error
     *
     * @param string $message
     * @param array $context
     */
    public static function error( string $message, array $context = [] ): void {
        self::log( $message, self::LEVEL_ERROR, $context );
    }

    /**
     * Log a warning
     *
     * @param string $message
     * @param array $context
     */
    public static function warning( string $message, array $context = [] ): void {
        self::log( $message, self::LEVEL_WARNING, $context );
    }

    /**
     * Log info
     *
     * @param string $message
     * @param array $context
     */
    public static function info( string $message, array $context = [] ): void {
        self::log( $message, self::LEVEL_INFO, $context );
    }

    /**
     * Log debug information
     *
     * @param string $message
     * @param array $context
     */
    public static function debug( string $message, array $context = [] ): void {
        self::log( $message, self::LEVEL_DEBUG, $context );
    }

    /**
     * Log plugin generation
     *
     * @param string $plugin_name
     * @param int $user_id
     * @param array $plugin_data
     */
    public static function log_plugin_generation( string $plugin_name, int $user_id, array $plugin_data = [] ): void {
        self::info(
            sprintf( 'Plugin "%s" generated by user %d', $plugin_name, $user_id ),
            [
                'plugin_name' => $plugin_name,
                'user_id' => $user_id,
                'plugin_data' => $plugin_data,
            ]
        );
    }

    /**
     * Log security event
     *
     * @param string $event
     * @param array $context
     */
    public static function log_security_event( string $event, array $context = [] ): void {
        self::warning(
            sprintf( 'Security event: %s', $event ),
            array_merge(
                $context, [
					'ip' => self::get_client_ip(),
					'user_agent' => sanitize_text_field( wp_unslash( $_SERVER['HTTP_USER_AGENT'] ?? 'Unknown' ) ),
				]
            )
        );
    }

    /**
     * Get client IP address
     *
     * @return string
     */
    private static function get_client_ip(): string {
        $ip_keys = [ 'HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR' ];

        foreach ( $ip_keys as $key ) {
            if ( array_key_exists( $key, $_SERVER ) === true ) {
                foreach ( explode( ',', wp_unslash( $_SERVER[ $key ] ) ) as $ip ) {
                    $ip = trim( $ip );
                    if ( filter_var( $ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE ) !== false ) {
                        return $ip;
                    }
                }
            }
        }

        return $_SERVER['REMOTE_ADDR'] ?? 'Unknown';
    }

    /**
     * Check if database logging is enabled
     *
     * @return bool
     */
    private static function is_database_logging_enabled(): bool {
        return apply_filters( 'plugin_composer_enable_database_logging', false );
    }

    /**
     * Store log entry in database
     *
     * @param array $log_entry
     */
    private static function store_log_entry( array $log_entry ): void {
        // This would be implemented if database logging is enabled
        // For now, it's a placeholder for future enhancement
        do_action( 'plugin_composer_store_log_entry', $log_entry );
    }
}
